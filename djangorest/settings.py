"""
Django settings for djangorest project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '47c*aq=ly(kb3hp5(p@%@_6v4s&zzvpo00i+sd22&!*6o5g8ei'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangorest_login',
    'rest_framework',
    'django_filters',
    'djangorest_jiekou',
    'djcelery',
    #'gunicorn',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangorest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangorest.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
import os





myhost = os.environ['myhost']
redis_pwd = os.environ['redis_pwd']

mysql_user = os.environ['mysql_user']
mysql_pwd = os.environ['mysql_pwd']
mysql_db = os.environ['mysql_db']

secKey = os.environ['sec_key']
email_user = os.environ['email_user']
email_pwd = os.environ['email_pwd']
email_host = os.environ['email_host']
pymongo_user = os.environ['pymongo_user']
pymongo_pwd = os.environ['pymongo_pwd']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test',
        'HOST': myhost,
        'USER': mysql_user,
        'PASSWORD': mysql_pwd,
        'PORT': '3306',
    }
}


REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',
    #'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
'UNAUTHENTICATED_USER': None,
    'UNAUTHENTICATED_TOKEN': None,
  "DEFAULT_THROTTLE_RATES":{
            "Hubery":"3/m",
"Jun":"10/m",
        },
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



CACHES={
    'default':{
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION':'redis://%s:6379/12'%myhost, # 指定db12
        #'TIMEOUT':300,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',  # 指定连接Redis的客户端类
            'PASSWORD': redis_pwd,
             # "SOCKET_CONNECT_TIMEOUT": 5,  # in seconds
             # "SOCKET_TIMEOUT": 5,  # in seconds
             # "CONNECTION_POOL_KWARGS": {"max_connections": 100},
             # "CONNECTION_POOL_CLASS": "myproj.mypool.MyOwnPool",
        }
    }
}

REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 ,
    # 缓存存储 default 表示缓存设置中设置的默认存储位置
    'DEFAULT_USE_CACHE': 'default',
}


import datetime




# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'







#celery配置信息
import djcelery
djcelery.setup_loader()
BROKER_URL = 'redis://:%s@%s:6379/6'%(redis_pwd,myhost)
CELERY_IMPORTS = ('djangorest_jiekou.tasks')
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
from celery.schedules import crontab
from celery.schedules import timedelta

CELERYBEAT_SCHEDULE = {    #定时器策略
    #定时任务一：　每隔30s运行一次
    '测试定时器1': {
        "task": "djangorest_jiekou.tasks.tsend_email",
        "schedule": crontab(minute='56', hour='17'),  # or 'schedule':   timedelta(seconds=3),
        #"schedule":timedelta(seconds=30),
        "args": (),
    },
}